{
	"additional_extensions": [],
	"autocomplete": true,
	"autoimport": true,
	"debug": false,
	"enable_auto_align": true,
	"excludes": [
		"ExtraCommaInArray",
		"PSR2CurlyOpenNextLine",
		"PSR2IndentWithSpace"
	],
	"format_on_save": false,
	"ignore_list": "",
	"indent_with_space": false,
	"php_bin": "C:/php8/php.exe",
	"psr1": true,
	"psr1_naming": true,
	"psr2": true,
	"readini": false,
	"skip_if_ini_missing": false,
	"smart_linebreak_after_curly": true,
	"visibility_order": false,
	"wp": false,
	"yoda": false,
	"passes": [
		"AddMissingCurlyBraces",
		// "AddMissingParentheses", /* Add extra parentheses in new instantiations. */
		"AliasToMaster", /* Replace function aliases to their masters - only basic syntax alias. */
		"AlignConstVisibilityEquals", /* Vertically align "=" of visibility and const blocks. */
		"AlignDoubleArrow", /* Vertically align T_DOUBLE_ARROW (=>). */
		"AlignDoubleSlashComments", /* Vertically align “//” comments. */
		"AlignEquals", /* Vertically align “=”. */
		"AlignGroupDoubleArrow", /*  Vertically align T_DOUBLE_ARROW (=>) by line groups. */
		"AlignPHPCode", /* Align PHP code within HTML block. */
		"AlignTypehint", /* Vertically align function type hints. */
		// "AllmanStyleBraces", /* Transform all curly braces into Allman-style. */
		// "AutoImportPass",
		// "AutoPreincrement", /* Automatically convert postincrement to preincrement. */
		"AutoSemicolon", /* Add semicolons in statements ends. */
		// "CakePHPStyle", /* Applies CakePHP Coding Style */
		// "ClassToSelf", /* “self” is preferred within class, trait or interface. */
		"ClassToStatic", /* “static” is preferred within class, trait or interface. */
		// "ConstructorPass",
		// "ConvertOpenTagWithEcho", /* Convert from “<?=” to “<?php echo ”. */
		"DocBlockToComment", /* Replace docblocks with regular comments when used in non structural elements. */
		"DoubleToSingleQuote", /* Convert from double to single quotes. */
		// "EchoToPrint", /* Convert from T_ECHO to print. */
		"EliminateDuplicatedEmptyLines",
		// "EncapsulateNamespaces", /* Encapsulate namespaces with curly braces */
		// "ExtraCommaInArray",
		// "GeneratePHPDoc", /* Automatically generates PHPDoc blocks */
		"IndentTernaryConditions", /* Applies indentation to ternary conditions. */
		"JoinToImplode", /* Replace implode() alias (join() -> implode()). */
		"LeftAlignComment",
		// "LeftWordWrap", /* Word wrap at 80 columns - left justify. */
		// "LongArray", /* Convert short to long arrays. */
		"MergeCurlyCloseAndDoWhile",
		"MergeDoubleArrowAndArray",
		"MergeElseIf", /* Merge if with else. */
		// "MergeNamespaceWithOpenTag", /* Ensure there is no more than one linebreak before namespace */
		"MergeParenCloseWithCurlyOpen",
		// "MildAutoPreincrement", /* Automatically convert postincrement to preincrement. (Deprecated pass. Use AutoPreincrement instead). */
		// "NamespaceMergeWithOpenTag",
		"NewLineBeforeReturn", /* Add an empty line before T_RETURN. */
		// "NoSpaceAfterPHPDocBlocks", /* Remove empty lines after PHPDoc blocks. */
		"NormalizeIsNotEquals",
		"NormalizeLnAndLtrimLines",
		// "OnlyOrderUseClauses", /* Order use block - do not remove unused imports. */
		"OrderAndRemoveUseClauses", /* Order use block and remove unused imports. */
		// "OrderMethod", /* Organize class, interface and trait structure. */
		// "OrderMethodAndVisibility", /* Organize class, interface and trait structure. */
		// "OrganizeClass", /* Organize class, interface and trait structure. */
		"PHPDocTypesToFunctionTypehint", /* Read variable types from PHPDoc blocks and add them in function signatures. */
		"PSR1BOMMark",
		"PSR1ClassConstants",
		"PSR1ClassNames",
		"PSR1MethodNames",
		"PSR1OpenTags",
		"PSR2AlignObjOp",
		// "PSR2CurlyOpenNextLine",
		"PSR2EmptyFunction", /* Merges in the same line of function header the body of empty functions. */
		// "PSR2IndentWithSpace",
		"PSR2KeywordsLowerCase",
		"PSR2LnAfterNamespace",
		"PSR2ModifierVisibilityStaticOrder",
		// "PSR2MultilineFunctionParams", /* Break function parameters into multiple lines. */
		"PSR2SingleEmptyLineAndStripClosingTag",
		"PrettyPrintDocBlocks", /* Prettify Doc Blocks */
		"RTrim",
		"Reindent",
		"ReindentAndAlignObjOps", /* Align object operators. */
		"ReindentColonBlocks",
		"ReindentComments",
		"ReindentEnumBlocks", /* Reindent one level deeper the content of enum blocks. */
		"ReindentEqual",
		"ReindentObjOps",
		"ReindentSwitchBlocks", /* Reindent one level deeper the content of switch blocks. */
		"RemoveIncludeParentheses",
		"RemoveSemicolonAfterCurly", /* Remove parentheses from include declarations. */
		"RemoveUseLeadingSlash", /* Remove leading slash in T_USE imports. */
		// "ReplaceBooleanAndOr", /* Convert from “and”/“or” to “&&”/“||”. Danger! This pass leads to behavior change. */
		// "ReplaceIsNull", /* Replace is_null($a) with null === $a. */
		"ResizeSpaces",
		// "RestoreComments", /* Revert any formatting of comments content. */
		"ReturnNull", /* Simplify empty returns. */
		"SettersAndGettersPass",
		"ShortArray", /* Convert old array into new array. (array() -> []) */
		"SmartLnAfterCurlyOpen", /* Add line break when implicit curly block is added. */
		"SortUseNameSpace", /* Organize use clauses by length and alphabetic order. */
		// "SpaceAfterExclamationMark", /* Add space after exclamation mark. */
		// "SpaceAroundControlStructures", /* Add space around control structures. */
		// "SpaceAroundExclamationMark", /* Add space after exclamation mark. */
		// "SpaceAroundParentheses", /* Add spaces inside parentheses. */
		"SpaceBetweenMethods", /* Put space between methods. */
		// "SplitCurlyCloseAndTokens",
		// "SplitElseIf", /* Merge if with else. */
		// "StrictBehavior", /* Activate strict option in array_search, base64_decode, in_array, array_keys, mb_detect_encoding. Danger! This pass leads to behavior change. */
		// "StrictComparison", /* All comparisons are converted to strict. Danger! This pass leads to behavior change. */
		"StripExtraCommaInArray", /* Remove trailing commas within array blocks */
		"StripExtraCommaInList",
		// "StripNewlineAfterClassOpen", /* Strip empty lines after class opening curly brace. */
		// "StripNewlineAfterCurlyOpen", /* Strip empty lines after opening curly brace. */
		// "StripNewlineWithinClassBody", /* Strip empty lines after class opening curly brace. */
		// "StripSpaceWithinControlStructures", /* Strip empty lines within control structures. */
		// "StripSpaces", /* Remove all empty spaces */
		"TightConcat", /* Ensure string concatenation does not have spaces, except when close to numbers. */
		"TrimSpaceBeforeSemicolon", /* Remove empty lines before semi-colon. */
		"TwoCommandsInSameLine",
		"UpgradeToPreg", /* Upgrade ereg* calls to preg* */
		"WPResizeSpaces",
		// "WordWrap", /* Word wrap at 80 columns. */
		"WrongConstructorName", /* Update old constructor names into new ones. http://php.net/manual/en/language.oop5.decon.php */
		// "YodaComparisons" /* Execute Yoda Comparisons. */
	]
}